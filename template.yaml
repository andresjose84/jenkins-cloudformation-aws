AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for JENKINS Server on EC2
Metadata:
  Authors:
    Description: Andres Jose Sanchez (andresjose84@gmail.com)
  License:
    Description: MIT License
    Details: |
      Copyright (c) 2025 Andres Jose Sanchez
      Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files, to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Parameters
        Parameters:
          - AWSRegion
          - AWSAmiId
          - HostedZoneId
          - DomainName
          - SSLCertificateEmail
          - JenkinsVpc
      - Label:
          default: Jenkins Configuration
        Parameters:
          - JenkinsInstanceName
          - JenkinsInstanceType
          - JenkinsKeyPair
          - JenkinsSubnet
          - JenkinsAllowSSHFrom
          - JenkinsAllowHTTPFrom
          - JenkinsVolumeSize
          - JenkinsVolumeType
          - JenkinsVolumeIOPS
          - JenkinsVolumeEncrypted
          - JenkinsVolumeKmsKeyId
          - JenkinsVolumeDeleteOnTermination
          - JenkinsVolumeSnapshotId
          - JenkinsVolumeTags
      - Label:
          default: Path Log Deploy
        Parameters:
          - LogDeploy
    ParameterLabels:
      AWSRegion:
        default: AWS Region
      AWSAmiId:
        default: AWS AMI ID
      HostedZoneId:
        default: Hosted Zone Id
      DomainName:
        default: Domain Name
      SSLCertificateEmail:
        default: SSL Certificate Email
      JenkinsVpc:
        default: Jenkins VPC
      JenkinsInstanceName:
        default: Jenkins Instance Name
      JenkinsInstanceType:
        default: Jenkins Instance Type
      JenkinsKeyPair:
        default: Jenkins Key Pair
      JenkinsSubnet:
        default: Jenkins Subnet
      JenkinsAllowSSHFrom:
        default: Allow SSH Traffic From
      JenkinsAllowHTTPFrom:
        default: Allow HTTP Traffic From
      JenkinsVolumeSize:
        default: Jenkins Volume Size
      JenkinsVolumeType:
        default: Jenkins Volume Type
      JenkinsVolumeIOPS:
        default: Jenkins Volume IOPS
      JenkinsVolumeEncrypted:
        default: Jenkins Volume Encrypted
      JenkinsVolumeKmsKeyId:
        default: Jenkins Volume KMS Key ID
      JenkinsVolumeDeleteOnTermination:
        default: Jenkins Volume Delete On Termination
      JenkinsVolumeSnapshotId:
        default: Jenkins Volume Snapshot ID
      JenkinsVolumeTags:
        default: Jenkins Volume Tags
      LogDeploy:
        default: Path Log Deploy

Parameters:
  AWSRegion:
    Type: String
    Description: AWS Region
    Default: us-east-1
    AllowedValues:
      - af-south-1
      - ap-east-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-south-1
      - ap-southeast-1
      - ap-southeast-2
      - ca-central-1
      - cn-north-1
      - cn-northwest-1
      - eu-central-1
      - eu-north-1
      - eu-south-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - me-south-1
      - sa-east-1
      - us-east-1
      - us-east-2
      - us-gov-east-1
      - us-gov-west-1
      - us-west-1
      - us-west-2
      - us-west-3
      - us-west-4
      - us-west-5
    ConstraintDescription: Must be a valid AWS region from the list.
  AWSAmiId:
    Type: String
    Description: AWS AMI ID
    Default: ami-0b4624933067d393a
    AllowedValues:
      - ami-0b4624933067d393a
      - ami-06744fbd0847bf4f5
      - ami-1234567890abcdef0
      - ami-0abcdef1234567890
    ConstraintDescription: Must be a valid AMI ID from the list.
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Select the Hosted Zone ID where the DNS record will be created
  DomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Default: 'jenkins.example.com'
    Description: The subdomain name for the jenkins server (e.g. jenkins.example.com).
    Type: String
  SSLCertificateEmail:
    Type: String
    Description: Email address for SSL certificate notifications
    Default: admin@example.com
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address
  JenkinsVpc:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC where the resources will be deployed.
  JenkinsInstanceType:
    Type: String
    Description: Jenkins Instance Type
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.12xlarge
      - m5a.24xlarge
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.12xlarge
      - m5n.24xlarge
      - m5ad.large
      - m5ad.xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.12xlarge
      - m5ad.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - m5dn.large
      - m5dn.xlarge
      - m5dn.2xlarge
      - m5dn.4xlarge
      - m5dn.12xlarge
      - m5dn.24xlarge
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.12xlarge
      - m5n.24xlarge
      - m5zn.large
      - m5zn.xlarge
      - m5zn.2xlarge
      - m5zn.3xlarge
  JenkinsKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Jenkins Key Pair
  JenkinsSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Jenkins Subnet
  JenkinsAllowSSHFrom:
    Type: String
    Description: CIDR block to allow SSH access (e.g., 0.0.0.0/0 for all IPs, or a
      specific range like 192.168.1.0/24)
    Default: 0.0.0.0/0
  JenkinsAllowHTTPFrom:
    Type: String
    Description: CIDR block to allow HTTP access to Jenkins (port 8080)
    Default: 0.0.0.0/0
  JenkinsVolumeSize:
    Type: Number
    Description: Jenkins Volume Size
    Default: '16'
    MinValue: '8'
    MaxValue: '1024'
    ConstraintDescription: Must be between 8 and 1024
  JenkinsVolumeType:
    Type: String
    Description: Jenkins Volume Type
    Default: gp2
    AllowedValues:
      - gp2
      - gp3
      - io1
      - io2
    ConstraintDescription: Must be a valid volume type from the list.
  JenkinsVolumeIOPS:
    Type: Number
    Description: Jenkins Volume IOPS (Only applicable for gp3, io1, and io2 volume types)
    Default: '0'
    MinValue: '0'
    MaxValue: '20000'
    ConstraintDescription: Must be between 0 and 20000
  JenkinsVolumeEncrypted:
    Type: String
    Description: Jenkins Volume Encrypted
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: Must be a valid boolean value from the list.
  JenkinsVolumeKmsKeyId:
    Type: String
    Description: KMS Key ID for encrypting the Jenkins volume. Leave empty to use
      default AWS-managed key.
    Default: ''
  JenkinsVolumeDeleteOnTermination:
    Type: String
    Description: Jenkins Volume Delete On Termination
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: Must be a valid boolean value from the list.
  JenkinsVolumeTags:
    Type: String
    Description: Jenkins Volume Tags
  LogDeploy:
    Type: String
    Description: File Log Deploy
    Default: /var/log/deploy.log

Conditions:
  CreateKmsKey: !Not
    - !Equals
      - !Ref JenkinsVolumeKmsKeyId
      - ''
  UseIOPS: !Or
    - !Equals [!Ref JenkinsVolumeType, 'io1']
    - !Equals [!Ref JenkinsVolumeType, 'io2']
    - !Equals [!Ref JenkinsVolumeType, 'gp3']

Resources:
  WebRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      TTL: '300'
      ResourceRecords:
        - !GetAtt JenkinsInstance.PublicIp
            
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Jenkins Server
      VpcId: !Ref JenkinsVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref JenkinsAllowSSHFrom
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref JenkinsAllowHTTPFrom
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref JenkinsAllowHTTPFrom
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref JenkinsAllowHTTPFrom
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-jenkins-sg

  JenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AWSAmiId
      InstanceType: !Ref JenkinsInstanceType
      KeyName: !Ref JenkinsKeyPair
      SubnetId: !Ref JenkinsSubnet
      SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref JenkinsVolumeSize
            VolumeType: !Ref JenkinsVolumeType
            Iops: !If
              - UseIOPS
              - !Ref JenkinsVolumeIOPS
              - !Ref AWS::NoValue
            Encrypted: !Ref JenkinsVolumeEncrypted
            DeleteOnTermination: !Ref JenkinsVolumeDeleteOnTermination
            KmsKeyId: !If
              - CreateKmsKey
              - !Ref JenkinsVolumeKmsKeyId
              - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-jenkins
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # Enable strict error handling
          set -e
          # Error handling
          trap 'echo "Error on line $LINENO. Failed command: $BASH_COMMAND" >> ${LogDeploy}' ERR
          
          # Logging function
          log_message() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') $1" >> ${LogDeploy}
          }
          
          log_message "Starting installation script"
          
          # Update system packages
          sudo dnf update -y >> ${LogDeploy} 2>&1
          sudo dnf clean packages
          
          # Install necessary packages
          sudo dnf install java-17-amazon-corretto nginx certbot python3-certbot-nginx -y || { log_message "Error installing packages"; exit 1; }
          
          # Install Jenkins
          sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
          sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io-2023.key
          sudo yum install jenkins -y || { log_message "Error installing Jenkins"; exit 1; }
          
          # Configure Jenkins
          sudo mkdir -p /etc/jenkins
          sudo cat > /etc/jenkins/jenkins.xml << 'EOL'
          <?xml version='1.0' encoding='UTF-8'?>
          <jenkins>
            <systemMessage>Jenkins URL: https://${DomainName}/</systemMessage>
            <jenkinsUrl>https://${DomainName}/</jenkinsUrl>
          </jenkins>
          EOL
          
          # Configure Nginx as reverse proxy
          sudo cat > /etc/nginx/conf.d/jenkins.conf << 'EOL'
          server {
              listen 80;
              server_name ${DomainName};
              
              location / {
                  proxy_pass http://localhost:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOL
          
          # Start and enable services
          sudo systemctl enable jenkins nginx
          sudo systemctl start jenkins nginx
          
          # Wait for Jenkins to start
          while ! sudo test -f /var/lib/jenkins/secrets/initialAdminPassword; do
            sleep 10
          done
          
          # Get Jenkins initial admin password
          JENKINS_PASSWORD=$(sudo cat /var/lib/jenkins/secrets/initialAdminPassword)
          log_message "Jenkins initial admin password: $JENKINS_PASSWORD"
          
          # Configure SSL with Certbot (automated)
          sudo certbot --nginx \
            --non-interactive \
            --agree-tos \
            --email ${SSLCertificateEmail} \
            -d ${DomainName} \
            --redirect
          
          log_message "Installation and configuration completed"

          # Verify certbot timer and service
          log_message "Configuring automatic certificate renewal"
          
          # Enable and start the certbot timer
          sudo systemctl enable certbot-renew.timer
          sudo systemctl start certbot-renew.timer
          
          # Verify the timer status
          sudo systemctl status certbot-renew.timer >> ${LogDeploy} 2>&1
          
          # Create a test script to verify renewal works
          sudo certbot renew --dry-run >> ${LogDeploy} 2>&1
          
          # Create a post-renewal hook to restart nginx
          sudo mkdir -p /etc/letsencrypt/renewal-hooks/post/
          sudo cat > /etc/letsencrypt/renewal-hooks/post/nginx-restart.sh << 'EOL'
          #!/bin/bash
          systemctl restart nginx
          EOL
          
          sudo chmod +x /etc/letsencrypt/renewal-hooks/post/nginx-restart.sh
          
          # Add a cron job to check certificate expiration
          echo "0 0 1 * * root certbot certificates | grep 'VALID:' | mail -s 'SSL Certificate Status for ${DomainName}' ${SSLCertificateEmail}" | sudo tee -a /etc/crontab > /dev/null
          
          log_message "Certificate renewal configuration completed"
          
          # Show renewal timer details
          log_message "Next automatic renewal scheduled for:"
          sudo systemctl list-timers certbot-renew.timer >> ${LogDeploy} 2>&1

          # Install AWS CLI
          log_message "Installing AWS CLI"
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf awscliv2.zip aws
          log_message "AWS CLI installed"
          aws --version >> ${LogDeploy} 2>&1

          log_message "Installation script completed"

Outputs:
  JenkinsSecurityGroup:
    Description: Security Group created for Jenkins
    Value: !Ref JenkinsSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup
  JenkinsInstance:
    Description: Jenkins Instance
    Value: !Ref JenkinsInstance
    Export:
      Name: !Sub ${AWS::StackName}-JenkinsInstance
  JenkinsInstancePublicDNS:
    Description: Jenkins Instance Public DNS
    Value: !GetAtt JenkinsInstance.PublicDnsName
    Export:
      Name: !Sub ${AWS::StackName}-JenkinsInstancePublicDNS
  JenkinsInstancePublicIP:
    Description: Jenkins Instance Public IP
    Value: !GetAtt JenkinsInstance.PublicIp
    Export:
      Name: !Sub ${AWS::StackName}-JenkinsInstancePublicIP
  JenkinsUrl:
    Description: Jenkins Admin Url
    Value: !Sub "http://${JenkinsInstance.PublicDnsName}:8080"
  JenkinsDomainName:
    Description: Jenkins Domain Name
    Value: !Sub https://${DomainName}